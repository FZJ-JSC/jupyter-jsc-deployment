{{- if .Values.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "manualIngress.name" . }}-files
  labels:
    app: {{ template "manualIngress.name" . }}
    chart: {{ template "manualIngress.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
data:
  nginx.conf: |
    user  nginx;
    worker_processes  auto;

    error_log  /var/log/nginx/error.log notice;
    pid        /var/run/nginx.pid;
    #worker_rlimit_nofile    1047552;
    events {
        worker_connections  16384;
    }

    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        real_ip_header proxy_protocol;
        real_ip_recursive on;
        set_real_ip_from 0.0.0.0/0;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"'
                          'upstream-server $upstream_addr';

        access_log  /var/log/nginx/access.log  main;

        # Reverse proxies can detect if a client provides a X-Request-ID header, and pass it on to the backend server.
        # If no such header is provided, it can provide a random value.
        map $http_x_request_id $req_id {
          default   $http_x_request_id;
          
          ""        $request_id;
          
        }

        sendfile        on;
        #tcp_nopush     on;

        keepalive_timeout  65;

        #gzip  on;

        include /etc/nginx/conf.d/*.conf;
    }

  {{- if .Values.enabledServices.jhub }}
  {{- range $jhubInstance := .Values.jhubInstances }}
  jhub-{{ $jhubInstance.name }}.conf: |
    # top-level http config for websocket headers
    # If Upgrade is defined, Connection = upgrade
    # If Upgrade is empty, Connection = close
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }
    {{- if $jhubInstance.upstream.enabled }}
    upstream backend-{{ $jhubInstance.name }} {
    {{- range $server := $jhubInstance.upstream.server }}
        server {{ $server }};
    {{- end }}
    }
    {{- end }}
    # HTTP server to redirect all 80 traffic to SSL/HTTPS
    # server {
    #     listen 80 proxy_protocol;
    #     server_name {{ $jhubInstance.serverName }};

    #     # Tell all requests to port 80 to be 302 redirected to HTTPS
    #     return 302 https://$host$request_uri;
    # }
    # HTTPS server to handle JupyterHub
    server {
        server_name {{ $jhubInstance.serverName }};

        listen 443 ssl proxy_protocol http2 ;

        ssl_certificate /mnt/{{ $jhubInstance.name }}/tls.crt;
        ssl_certificate_key /mnt/{{ $jhubInstance.name }}/tls.key;

        #ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        #ssl_dhparam /etc/ssl/certs/dhparam.pem;
        #ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
        #ssl_ciphers 'EECDH+AESGCM:EECDH+AES256';
        ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:AES256-GCM-SHA384';
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        # ssl_session_cache off;
        ssl_stapling_verify on;
        add_header Strict-Transport-Security max-age=15768000;

        {{- if not $jhubInstance.maintenance }}
        {{- if $jhubInstance.staticFiles }}
        location ~* "^/hub/static" {
            proxy_pass                              {{ default "http" $jhubInstance.staticFiles.scheme }}://{{ $jhubInstance.staticFiles.host }}:{{ $jhubInstance.staticFiles.port }};
            
            {{- if $jhubInstance.allowCidr }}
            allow                                   {{ $jhubInstance.allowCidr }};
            deny                                    all;
            {{- end }}

            proxy_set_header X-Real-IP              $remote_addr;
            proxy_set_header Host                   $host;
            proxy_set_header X-Forwarded-For        $proxy_add_x_forwarded_for;

            # websocket headers
            proxy_set_header Upgrade                $http_upgrade;
            proxy_set_header Connection             $connection_upgrade;
            proxy_set_header X-Scheme               $scheme;

            # mitigate HTTPoxy Vulnerability
            # https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
            proxy_set_header Proxy                  "";

            # Custom headers to proxied server            
            client_max_body_size                    {{ $jhubInstance.clientMaxBodySize | default "50m" }};
            proxy_connect_timeout                   {{ $jhubInstance.proxyConnectTimeout | default "5s" }};
            proxy_send_timeout                      {{ $jhubInstance.proxySendTimeout | default "60s" }};
            proxy_read_timeout                      {{ $jhubInstance.proxyReadTimeout | default "60s" }};
            
            proxy_buffering                         off;
            proxy_buffer_size                       4k;
            proxy_buffers                           4 4k;
            
            proxy_max_temp_file_size                {{ $jhubInstance.proxyMaxTempFileSize | default "1024m" }};
            
            proxy_request_buffering                 on;
            proxy_http_version                      1.1;
            
            proxy_cookie_domain                     off;
            proxy_cookie_path                       off;
            
            # In case of errors try the next upstream server before returning an error
            proxy_next_upstream                     error timeout;
            proxy_next_upstream_timeout             0;
            proxy_next_upstream_tries               3;
                        
            proxy_redirect                          off;
        }
        {{- range $redirect := $jhubInstance.staticFiles.redirects }}
        location ~* "^/{{ $redirect }}" {
            proxy_pass                              {{ default "http" $jhubInstance.staticFiles.scheme }}://{{ $jhubInstance.staticFiles.host }}:{{ $jhubInstance.staticFiles.port }};
            {{- if $jhubInstance.allowCidr }}
            allow                                   {{ $jhubInstance.allowCidr }};
            deny                                    all;
            {{- end }}

            proxy_set_header X-Real-IP              $remote_addr;
            proxy_set_header Host                   $host;
            proxy_set_header X-Forwarded-For        $proxy_add_x_forwarded_for;

            # websocket headers
            proxy_set_header Upgrade                $http_upgrade;
            proxy_set_header Connection             $connection_upgrade;
            proxy_set_header X-Scheme               $scheme;

            # mitigate HTTPoxy Vulnerability
            # https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
            proxy_set_header Proxy                  "";

            # Custom headers to proxied server            
            client_max_body_size                    {{ $jhubInstance.clientMaxBodySize | default "50m" }};
            proxy_connect_timeout                   {{ $jhubInstance.proxyConnectTimeout | default "5s" }};
            proxy_send_timeout                      {{ $jhubInstance.proxySendTimeout | default "60s" }};
            proxy_read_timeout                      {{ $jhubInstance.proxyReadTimeout | default "60s" }};
            
            proxy_buffering                         on;
            proxy_buffer_size                       4k;
            proxy_buffers                           4 4k;
            
            proxy_max_temp_file_size                {{ $jhubInstance.proxyMaxTempFileSize | default "1024m" }};
            
            proxy_request_buffering                 on;
            proxy_http_version                      1.1;
            
            proxy_cookie_domain                     off;
            proxy_cookie_path                       off;
            
            # In case of errors try the next upstream server before returning an error
            proxy_next_upstream                     error timeout;
            proxy_next_upstream_timeout             0;
            proxy_next_upstream_tries               3;
                        
            proxy_redirect                          off;
        }
        {{- end }}
        {{- end }}
        {{- end }}
        # Managing literal requests to the JupyterHub front end
        location ~* "^/" {
            {{- if $jhubInstance.maintenance }}
            proxy_pass                              http://{{ $jhubInstance.maintenanceHost }};
            {{- else }}
            {{- if $jhubInstance.upstream.enabled }}
            proxy_pass                              {{ default "http" $jhubInstance.scheme }}://backend-{{ $jhubInstance.name }};
            {{- else }}
            proxy_pass                              {{ default "http" $jhubInstance.scheme }}://{{ $jhubInstance.host }};
            {{- end }}
            {{- end }}
            {{- if $jhubInstance.allowCidr }}
            allow                                   {{ $jhubInstance.allowCidr }};
            deny                                    all;
            {{- end }}

            proxy_set_header X-Real-IP              $remote_addr;
            proxy_set_header Host                   $host;
            proxy_set_header X-Forwarded-For        $proxy_add_x_forwarded_for;

            # websocket headers
            proxy_set_header Upgrade                $http_upgrade;
            proxy_set_header Connection             $connection_upgrade;
            proxy_set_header X-Scheme               $scheme;

            # mitigate HTTPoxy Vulnerability
            # https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
            proxy_set_header Proxy                  "";

            # Custom headers to proxied server            
            client_max_body_size                    {{ $jhubInstance.clientMaxBodySize | default "50m" }};
            proxy_connect_timeout                   {{ $jhubInstance.proxyConnectTimeout | default "5s" }};
            proxy_send_timeout                      {{ $jhubInstance.proxySendTimeout | default "60s" }};
            proxy_read_timeout                      {{ $jhubInstance.proxyReadTimeout | default "60s" }};
            
            proxy_buffering                         off;
            proxy_buffer_size                       4k;
            proxy_buffers                           4 4k;
            
            proxy_max_temp_file_size                {{ $jhubInstance.proxyMaxTempFileSize | default "1024m" }};
            
            proxy_request_buffering                 on;
            proxy_http_version                      1.1;
            
            proxy_cookie_domain                     off;
            proxy_cookie_path                       off;
            
            # In case of errors try the next upstream server before returning an error
            proxy_next_upstream                     error timeout http_503;
            proxy_next_upstream_timeout             0;
            proxy_next_upstream_tries               {{ $jhubInstance.upstream.tries | default 3 }};
                        
            proxy_redirect                          off;
        }
        # Managing requests to verify letsencrypt host
        location ~ /.well-known {
            allow all;
        }
    }
  {{- end }}
  {{- end }}

  {{- if .Values.enabledServices.airflow }}
  {{- range $airflowInstance := .Values.airflowInstances }}
  airflow-{{ $airflowInstance.name }}.conf: |
    # HTTP server to redirect all 80 traffic to SSL/HTTPS
    # server {
    #     listen 80 proxy_protocol;
    #     server_name {{ $airflowInstance.serverName }};

    #     # Tell all requests to port 80 to be 302 redirected to HTTPS
    #     return 302 https://$host$request_uri;
    # }
    # HTTPS server to handle Airflow
    server {
        server_name {{ $airflowInstance.serverName }};

        listen 443 ssl proxy_protocol http2 ;

        ssl_certificate /mnt/{{ $airflowInstance.name }}/tls.crt;
        ssl_certificate_key /mnt/{{ $airflowInstance.name }}/tls.key;

        #ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        #ssl_dhparam /etc/ssl/certs/dhparam.pem;
        #ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
        #ssl_ciphers 'EECDH+AESGCM:EECDH+AES256';
        ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:AES256-GCM-SHA384';
        ssl_stapling_verify on;

        location ~* "^/airflow" {
            proxy_pass                              {{ default "http" $airflowInstance.scheme }}://{{ $airflowInstance.host }};

            {{- if $airflowInstance.allowCidr }}
            allow {{ $airflowInstance.allowCidr }};
            deny all;
            {{- end }}
            
            proxy_set_header Host                   $host;
            proxy_set_header                        Upgrade           $http_upgrade;
            proxy_set_header                        Connection        $connection_upgrade;
            proxy_set_header X-Request-ID           $req_id;
            proxy_set_header X-Real-IP              $remote_addr;
            proxy_set_header X-Forwarded-For        $proxy_add_x_forwarded_for;

            proxy_set_header X-Forwarded-Host       $host;
            proxy_set_header X-Forwarded-Proto      $scheme;
            proxy_set_header X-Forwarded-Scheme     $scheme;
            
            proxy_set_header X-Scheme               $scheme;
                        
            # mitigate HTTPoxy Vulnerability
            # https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
            proxy_set_header Proxy                  "";
            
            # Custom headers to proxied server            
            client_max_body_size                    {{ $airflowInstance.clientMaxBodySize | default "50m" }};
            proxy_connect_timeout                   {{ $airflowInstance.proxyConnectTimeout | default "5s" }};
            proxy_send_timeout                      {{ $airflowInstance.proxySendTimeout | default "60s" }};
            proxy_read_timeout                      {{ $airflowInstance.proxyReadTimeout | default "60s" }};
            
            proxy_buffering                         off;
            proxy_buffer_size                       4k;
            proxy_buffers                           4 4k;
            
            proxy_max_temp_file_size                {{ $airflowInstance.proxyMaxTempFileSize | default "1024m" }};
            
            proxy_request_buffering                 on;
            proxy_http_version                      1.1;
            
            proxy_cookie_domain                     off;
            proxy_cookie_path                       off;
            
            # In case of errors try the next upstream server before returning an error
            proxy_next_upstream                     error timeout;
            proxy_next_upstream_timeout             0;
            proxy_next_upstream_tries               3;
                        
            proxy_redirect                          off; 
        }
    }
  {{- end }}
  {{- end }}

  {{- if .Values.enabledServices.nbviewer }}
  {{- range $nbviewerInstance := .Values.nbviewerInstances }}
  nbviewer-{{ $nbviewerInstance.name }}.conf: |
    # HTTP server to redirect all 80 traffic to SSL/HTTPS
    # server {
    #     listen 80 proxy_protocol;
    #     server_name {{ $nbviewerInstance.serverName }};

    #     # Tell all requests to port 80 to be 302 redirected to HTTPS
    #     return 302 https://$host$request_uri;
    # }
    # HTTPS server to handle nbviewer
    server {
        server_name {{ $nbviewerInstance.serverName }};

        listen 443 ssl proxy_protocol http2 ;

        ssl_certificate /mnt/{{ $nbviewerInstance.name }}/tls.crt;
        ssl_certificate_key /mnt/{{ $nbviewerInstance.name }}/tls.key;

        #ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        #ssl_dhparam /etc/ssl/certs/dhparam.pem;        
        #ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
        #ssl_ciphers 'EECDH+AESGCM:EECDH+AES256';
        ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:AES256-GCM-SHA384';

        location / {
            proxy_pass                              {{ default "http" $nbviewerInstance.scheme }}://{{ $nbviewerInstance.host }}:{{ $nbviewerInstance.port }};

            {{- if $nbviewerInstance.allowCidr }}
            allow                                   {{ $nbviewerInstance.allowCidr }};
            deny                                    all;
            {{- end }}

            proxy_set_header X-Real-IP              $remote_addr;
            proxy_set_header Host                   $host;
            proxy_set_header X-Forwarded-For        $proxy_add_x_forwarded_for;

            # websocket headers
            proxy_set_header Upgrade                $http_upgrade;
            proxy_set_header Connection             $connection_upgrade;
            proxy_set_header X-Scheme               $scheme;

            # mitigate HTTPoxy Vulnerability
            # https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
            proxy_set_header Proxy                  "";

            # Custom headers to proxied server     
            client_max_body_size                    {{ $nbviewerInstance.clientMaxBodySize | default "50m" }};       
            proxy_connect_timeout                   {{ $nbviewerInstance.proxyConnectTimeout | default "5s" }};
            proxy_send_timeout                      {{ $nbviewerInstance.proxySendTimeout | default "60s" }};
            proxy_read_timeout                      {{ $nbviewerInstance.proxyReadTimeout | default "60s" }};
            
            proxy_buffering                         off;
            proxy_buffer_size                       4k;
            proxy_buffers                           4 4k;
            
            proxy_max_temp_file_size                {{ $nbviewerInstance.proxyMaxTempFileSize | default "1024m" }};
            
            proxy_request_buffering                 on;
            proxy_http_version                      1.1;
            
            proxy_cookie_domain                     off;
            proxy_cookie_path                       off;
            
            # In case of errors try the next upstream server before returning an error
            proxy_next_upstream                     error timeout;
            proxy_next_upstream_timeout             0;
            proxy_next_upstream_tries               3;
                        
            proxy_redirect                          off;
        }
    }  
  {{- end }}
  {{- end }}
{{- end }}