hub:
  extraConfig:
    customConfig: |-
      import os
      import sys

      custom_path = "/src/jupyterhub-custom"
      sys.path.insert(1, custom_path)

      namespace = os.environ.get("POD_NAMESPACE", "default")
      jupyterhub_version = os.environ.get("JUPYTERHUB_VERSION", "2.1.1")
      jupyterhub_host = get_name("hub")
      unity_host = "unity-jsc.fz-juelich.de"

      from apihandler import ForwardTunnelRestartAPIHandler
      from apihandler import DRFServiceLogLevelAPIHandler
      from apihandler import JHubLogLevelAPIHandler
      from apihandler import SpawnNotificationAPIHandler
      from apihandler import SpawnProgressStatusAPIHandler
      from apihandler import SpawnProgressUpdateAPIHandler
      from apihandler import SpawnStopNotificationAPIHandler
      from apihandler import SpawnUpdateOptionsAPIHandler
      from apihandler import twoFA
      from apihandler import UserRandomServerAPIHandler
      from apihandler import user_cancel_message
      from apihandler import vo
      from customauthenticator import CustomGenericOAuthenticator
      from handler import page_handlers
      from spawner import BackendSpawner
      from logs import create_extra_handlers

      c.JupyterHub.log_level = 10
      custom_config_path = os.environ.get("CUSTOM_CONFIG_PATH", "/mnt/shared-data/git_config/jupyterhub_custom_config.json")
      c.JupyterHub.custom_config_file = custom_config_path
      c.JupyterHub.extra_log_handlers = create_extra_handlers()
      db_host = os.environ.get("SQL_HOST")
      db_port = os.environ.get("SQL_PORT")
      db_user = os.environ.get("SQL_USER")
      db_password = os.environ.get("SQL_PASSWORD")
      db_database = os.environ.get("SQL_DATABASE")
      c.JupyterHub.db_url = f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_database}"
      c.JupyterHub.pid_file = "/mnt/persistent/jupyterhub.pid"
      c.JupyterHub.cookie_secret_file = "/mnt/persistent/jupyterhub_cookie_secret"

      c.JupyterHub.allow_named_servers = True
      c.JupyterHub.internal_ssl = True
      c.JupyterHub.external_ssl_authorities = {
        "services-ca": {
          "key": "/mnt/persistent/internal-ssl/services-ca/services-ca.key",
          "cert": "/mnt/persistent/internal-ssl/services-ca/services-ca.crt",
          "ca": "/mnt/persistent/internal-ssl/services-ca_trust.crt"
        },
        "proxy-client-ca": {
          "key": "/mnt/persistent/internal-ssl/proxy-client-ca/proxy-client-ca.key",
          "cert": "/mnt/persistent/internal-ssl/proxy-client-ca/proxy-client-ca.crt",
          "ca": "/mnt/persistent/internal-ssl/proxy-client-ca_trust.crt"
        },
        "proxy-api-ca": {
          "key": "/mnt/persistent/internal-ssl/proxy-api-ca/proxy-api-ca.key",
          "cert": "/mnt/persistent/internal-ssl/proxy-api-ca/proxy-api-ca.crt",
          "ca": "/mnt/persistent/internal-ssl/proxy-api-ca_trust.crt"
        },
        "notebooks-ca": {
          "key": "/mnt/persistent/internal-ssl/notebooks-ca/notebooks-ca.key",
          "cert": "/mnt/persistent/internal-ssl/notebooks-ca/notebooks-ca.crt",
          "ca": "/mnt/persistent/internal-ssl/notebooks-ca_trust.crt"
        },
        "hub-ca": {
          "key": "/mnt/persistent/internal-ssl/hub-ca/hub-ca.key",
          "cert": "/mnt/persistent/internal-ssl/hub-ca/hub-ca.crt",
          "ca": "/mnt/persistent/internal-ssl/hub-ca_trust.crt"
        }
      }
      c.JupyterHub.internal_certs_location = "/mnt/shared-data/tmp-internal-ssl"
      c.JupyterHub.ssl_cert = "/mnt/persistent/internal-ssl/hub-internal/hub-internal.crt"
      c.JupyterHub.ssl_key = "/mnt/persistent/internal-ssl/hub-internal/hub-internal.key"
      c.ConfigurableHTTPProxy.api_url = f'https://{get_name("proxy-api")}:{get_name_env("proxy-api", "_SERVICE_PORT")}'
      c.JupyterHub.hub_bind_url = f"https://:{hub_container_port}"
      c.JupyterHub.hub_connect_url = (
        f'https://{get_name("hub")}:{get_name_env("hub", "_SERVICE_PORT")}'
      )
      # TODO override cull service. cull --url http:// instead of https://
      c.JupyterHub.concurrent_spawn_limit = 7

      c.JupyterHub.spawner_class = BackendSpawner
      c.BackendSpawner.http_timeout = 900
      c.BackendSpawner.poll_interval = 10
      c.BackendSpawner.poll_interval_randomizer = 20
      # c.BackendSpawner.ssl_alt_names = [f"DNS:{jupyterhub_host}"]
      # See https://github.com/jupyterhub/jupyterhub/issues/1222#issuecomment-415264385
      c.JupyterHub.tornado_settings = {"slow_spawn_timeout": 0}

      c.JupyterHub.authenticator_class = CustomGenericOAuthenticator
      # c.Authenticator.admin_users = {'a.grosch@fz-juelich.de', 't.kreuzer@fz-juelich.de'}
      c.Authenticator.admin_users = {'a.grosch_at_fz-juelich.de', 't.kreuzer_at_fz-juelich.de'}

      c.CustomGenericOAuthenticator.custom_config_file = custom_config_path
      c.CustomGenericOAuthenticator.enable_auth_state = True
      c.CustomGenericOAuthenticator.client_id = os.environ.get("OAUTH_CLIENT_ID")
      c.CustomGenericOAuthenticator.client_secret = os.environ.get("OAUTH_CLIENT_SECRET")
      c.CustomGenericOAuthenticator.authorize_url = (
          f"https://{unity_host}/jupyter-oauth2-as/oauth2-authz"
      )
      c.CustomGenericOAuthenticator.token_url = (
          f"https://{unity_host}/jupyter-oauth2/token"
      )
      c.CustomGenericOAuthenticator.tokeninfo_url = (
          f"https://{unity_host}/jupyter-oauth2/tokeninfo"
      )
      c.CustomGenericOAuthenticator.userdata_url = (
          f"https://{unity_host}/jupyter-oauth2/userinfo"
      )
      c.CustomGenericOAuthenticator.username_key = "username_attr"
      c.CustomGenericOAuthenticator.scope = "single-logout;hpc_infos;x500;authenticator;eduperson_entitlement;username;profile".split(
          ";"
      )
      c.CustomGenericOAuthenticator.tls_verify = False


      # def foo():
      #    ret = {"key1": ["value1", "value2"]}
      #    return ret


      # c.CustomGenericOAuthenticator.extra_params_allowed_runtime = foo
      # http://localhost:8000/hub/oauth_login?extra_param_key1=value1

      jhub_hostname = os.environ.get("JUPYTERHUB_HOSTNAME", "default")

      c.JupyterHub.template_paths = [f"/mnt/shared-data/jhub_files/{jupyterhub_version}/templates"]
      c.JupyterHub.template_vars = {
          "spawn_progress_update_url": "users/progress/update",
          "user_cancel_message": user_cancel_message,
          "hostname": jhub_hostname,
          # where Jinja2's `extends` and `includes` should look for templates 
          "template_path": jhub_hostname
      }
      c.JupyterHub.data_files_path = f"/mnt/shared-data/jhub_files/{jupyterhub_version}"

      c.JupyterHub.extra_handlers = [
          # PageHandlers
          (r"/links", page_handlers.LinksHandler),
          (r"/2FA", page_handlers.TwoFAHandler),
          (r"/imprint", page_handlers.ImprintHandler),
          (r"/privacy", page_handlers.DPSHandler),
          (r"/terms", page_handlers.ToSHandler),
          (r"/groups", page_handlers.VOHandler),
          (r"/logging", page_handlers.LoggingHandler),
          (r"/logging", page_handlers.LoggingHandler),
          # APIHandlers
          (r"/api/users/([^/]+)/random/server", UserRandomServerAPIHandler),
          (r"/api/users/([^/]+)/server/update", SpawnUpdateOptionsAPIHandler),
          (r"/api/users/([^/]+)/servers/([^/]*)/update", SpawnUpdateOptionsAPIHandler),
          (r"/api/users/progress/update/([^/]+)", SpawnProgressUpdateAPIHandler),
          (r"/api/users/progress/update/([^/]+)/([^/]+)", SpawnProgressUpdateAPIHandler),
          (r"/api/users/progress/status/([^/]+)", SpawnProgressStatusAPIHandler),
          (r"/api/users/progress/status/([^/]+)/([^/]+)", SpawnProgressStatusAPIHandler),
          (r"/api/users/([^/]+)/notifications/spawners/spawn", SpawnNotificationAPIHandler),
          (
              r"/api/users/([^/]+)/notifications/spawners/stop",
              SpawnStopNotificationAPIHandler,
          ),
          (r"/api/restarttunnel", ForwardTunnelRestartAPIHandler),
          (r"/api/2FA", twoFA.TwoFAAPIHandler),
          (r"/2FA/([^/]+)", twoFA.TwoFACodeHandler),
          (r"/api/vo/([^/]+)", vo.VOAPIHandler),
          (r"/api/votoken/([^/]+)", vo.VOTokenAPIHandler),
          (r"/api/logs/jhub/handler", JHubLogLevelAPIHandler),
          (r"/api/logs/jhub/handler/([^/]+)", JHubLogLevelAPIHandler),
          (r"/api/logs/([^/]+)/handler", DRFServiceLogLevelAPIHandler),
          (r"/api/logs/([^/]+)/handler/([^/]+)", DRFServiceLogLevelAPIHandler),
      ]

      c.JupyterHub.trusted_alt_names = [
        "DNS:juniq-hub",
        "DNS:juniq-proxy-public",
        f"DNS:{jhub_hostname}",
        "DNS:drf-k8smgr-jhub-juniq-forward.jupyterjsc.svc",
        "DNS:drf-k8smgr-jhub-juniq-forward.userlabs.svc",
      ]
      c.CustomGenericOAuthenticator.oauth_callback_url = (
          f"https://{jhub_hostname}/hub/oauth_callback"
      )
