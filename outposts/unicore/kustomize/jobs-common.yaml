apiVersion: v1
kind: ConfigMap
metadata:
  name: unicore-jobs-common
  namespace: unicore
data:
  input_.jupyter.token: "<JUPYTERHUB_API_TOKEN>"
  input_.oauth.scopes: "<JUPYTERHUB_OAUTH_SCOPES>"
  input_config.py: |
    c = get_config()
    c.ServerApp.ip = "0.0.0.0"
    c.ServerApp.port = int("_port_")
    c.ServerApp.root_dir = "/"
    c.ServerApp.default_url = "/lab/workspaces/_servername_/tree_home_"
    c.ContentsManager.allow_hidden = True
    c.ServerApp.terminado_settings = {"shell_command": ["/bin/bash"]}
    c.ServerApp.tornado_settings = {"websocket_max_message_size": 1024 * 1024 * 1024}
    c.ServerApp.max_buffer_size = 1024 * 1024 * 1024
    c.ServerApp.max_body_size = 1024 * 1024 * 1024
    c.ServerApp.quit_button = False
  input_stop.sh: |
    # We'll be waiting for JupyterLab to come up for max 300 seconds
    # and kill it once it's up
    END=$((SECONDS+300))
    DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
    PID_PATH=${DIR}/service.pid
    VALIDATE_TOKEN_PID_PATH=${DIR}/validate_token.pid
    echo "$(date) - stop.sh - Wait for ${PID_PATH}"
    while [[ ${SECONDS} -lt ${END} ]]; do
      if [[ -f ${PID_PATH} ]]; then
        child=$(cat ${PID_PATH})
        echo "$(date) - stop.sh - Found PID: ${child}"
        pkill --parent $child
        kill $child
        echo "$(date) - stop.sh - Wait 5 seconds for validate token pid"
        sleep 5
        if [[ -f ${VALIDATE_TOKEN_PID_PATH} ]]; then
          token_pid=$(cat ${VALIDATE_TOKEN_PID_PATH})
          echo "$(date) - stop.sh - Stop Validate Token Script ( $token_pid ) ..."
          kill $token_pid
          echo "$(date) - stop.sh - Stop Validate Token Script ( $token_pid ) ... done"
        else
          echo "$(date) - stop.sh - No validate token PID found."
        fi
        break
      fi
      echo "$(date) - stop.sh - No PID yet - sleep 10"
      sleep 10
    done
    echo "$(date) - stop.sh - done"
  input_validate_token.sh: |
    #!/bin/bash
    # If JupyterHub could not stop JupyterLab it will be running forever.
    # But the API_TOKEN is no longer valid, so we check if it's valid and stop
    # JupyterLab if that's not the case
    JLAB_PID=${1}
    JUPYTERHUB_API_URL=${2}
    # Get current directory
    DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
    TOKEN=$(cat ${DIR}/.jupyter.token)
    COUNT=0
    HOSTNAME_S=$(hostname -s)
    # If this JupyterLab is running on a LoginNode, we'll use the external api url. Otherwise we have to use a LoginNode as Proxy.
    if [[ ${HOSTNAME_S} == "<hostname_base>"* ]]; then
      export CURL_ARGS=""
    else
      if [[ ${JUPYTERHUB_API_URL} == "https://"* ]]; then
        export CURL_ARGS="--cacert ${DIR}/notebooks-ca_trust.crt"
      else
        export CURL_ARGS=""
      fi
    fi
    while true;
    do
        HTTPCODE=$(curl ${CURL_ARGS} --write-out '%{http_code}' --silent --output /dev/null -X "GET" -H "Authorization: token ${TOKEN}" ${JUPYTERHUB_API_URL}/user)
        echo "$(date) - Validate token - Result: ${HTTPCODE}"
        if [[ ${HTTPCODE} -eq 403 ]]; then
            COUNT=$((COUNT+1))
            echo "$(date) - 403 Counter: ${COUNT}"
        else
            COUNT=0
        fi
        if [[ ${COUNT} -ge 3 ]]; then
            echo "$(date) - Kill JupyterLab PID $JLAB_PID ( ${HTTPCODE} )"
            pkill --parent $JLAB_PID
            kill -9 $JLAB_PID
            exit
        fi
        sleep 300
    done
  job_description.json: |
    {
        "ApplicationName": "Bash shell",
        "Executable": "/bin/bash",
        "Arguments": [
            "start.sh"
        ],
        "umask": "022",
        "NotificationSettings": {
            "URL": "<JUPYTERHUB_UNICORE_NOTIFICATION_URL>",
            "bssStatus": ["PENDING", "CONFIGURING"]
        }
    }


