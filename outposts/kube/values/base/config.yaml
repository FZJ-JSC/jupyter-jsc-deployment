outpostConfig: |-
  import os

  from kubespawner import KubeSpawner

  logged_logger_name = os.environ.get("LOGGER_NAME", "Outpost")
  c.JupyterHubOutpost.log_format = f"%(color)s[%(levelname)1.1s %(asctime)s.%(msecs).03d {logged_logger_name} %(name)s %(module)s:%(lineno)d]%(end_color)s %(message)s"

  c.JupyterHubOutpost.spawner_class = KubeSpawner

  c.KubeSpawner.image = "registry.jsc.fz-juelich.de/jupyterjsc/k8s/images/user-jupyterlab:lmod-4.0.2"
  c.KubeSpawner.image_pull_policy = "Always"
  c.KubeSpawner.node_selector = {"usernode": "true"}
  c.KubeSpawner.tolerations = [
      {"key": "usernode", "value": "true", "effect": "NoExecute"}
  ]

  c.KubeSpawner.fs_gid = 100
  c.KubeSpawner.container_security_context = {
      "allowPrivilegeEscalation": True,
      "privileged": True,
      "capabilities": {
          "add": ["CAP_SYS_ADMIN"]
      }
  }

  # Might need longer delete grace periods for unmounting in production
  # c.KubeSpawner.delete_grace_period = 5
  c.KubeSpawner.lifecycle_hooks = {
      "preStop": {
          "exec": {
              "command": ["/bin/sh", "-c", "kill $(ps x | grep '[t]imeout .* jupyterhub-singleuser' | awk '{print $1}')"]
          }
      }
  }
  c.KubeSpawner.delete_stopped_pods = False

  c.KubeSpawner.cpu_guarantee = 0.1
  c.KubeSpawner.cpu_limit = 2
  c.KubeSpawner.mem_guarantee = "512M"
  c.KubeSpawner.mem_limit = "4096M"


  def get_profile_volume_mounts(profile):
      common_mounts = [
          {
              "name": "nfs-software", 
              "mountPath": "/p/software/jsccloud", 
              "readOnly": True
          },
          {
              "name": "uftp", 
              "mountPath": "/tmp/custom/uftp.py",
              "subPath": "uftp.py"
          }
      ]
      profile_mounts = [
        {
              "name": f"modules-{profile}", 
              "mountPath": "/tmp/custom/load_jupyter_version.sh", 
              "subPath": "load_jupyter_version.sh"
          },
          {
              "name": f"modules-user-{profile}", 
              "mountPath": "/tmp/custom/load_jupyter_modules.sh",
              "subPath": "load_jupyter_modules.sh"
          } 
      ]
      return common_mounts + profile_mounts
  

  def get_profile_volumes(profile):
      common_volumes = [
          {
              "name": "nfs-software", 
              "hostPath": {
                  "path": "/p/software/jsccloud", 
                  "type": ""
              }
          },
          {
              "name": "uftp", 
              "configMap": {
                  "defaultMode": 292,
                  "name": "uftp"
              }
          }
      ]
      profile_volumes = [
        {
              "name": f"modules-{profile}", 
              "configMap": {
                  "defaultMode": 292,
                  "name": f"modules-{profile}"
              }
          },
          {
              "name": f"modules-user-{profile}", 
              "configMap": {
                  "defaultMode": 292,
                  "name": f"modules-user-{profile}"
              }
          } 
      ]
      return common_volumes + profile_volumes


  c.KubeSpawner.profile_list = [
      {
          "display_name": "JupyterLab - 3.6",
          "slug": "JupyterLab/3.6",
          "kubespawner_override": {
              "volume_mounts": get_profile_volume_mounts("3-6"),
              "volumes": get_profile_volumes("3-6")
          }
      }
  ]


