hub:
  extraConfig:
    customConfig: |-
      import asyncio
      import base64
      import logging
      import os
      import random
      import sys
      import time

      from backendspawner import EventBackendSpawner
      from backendspawner import user_cancel_message
      from datetime import datetime
      from tornado.httpclient import HTTPRequest

      app_name_dash = get_name("fullname-dash")
      app_name_dash_hub = get_name("hub")
      custom_path = "/src/jupyterhub-custom"
      sys.path.insert(1, custom_path)
      sys.path.append("/mnt/customized")

      namespace = os.environ.get("POD_NAMESPACE", "default")
      jupyterhub_version = os.environ.get("JUPYTERHUB_VERSION", "4.0.0")
      jupyterhub_host = get_name("hub")
      unity_host = "unity-jsc.fz-juelich.de"
      jhub_hostname = os.environ.get("JUPYTERHUB_HOSTNAME", "default")

      import jsc_custom
      from jsc_custom.authenticator import CustomGenericOAuthenticator
      from jsc_custom.logs import create_extra_handlers
      from jsc_custom.misc import get_custom_config
      from jsc_custom.misc import get_incidents
      from jsc_custom.spawner.utils import get_spawner_events

      c.JupyterHub.log_level = 10
      c.JupyterHub.extra_log_handlers = create_extra_handlers()
      db_host = os.environ.get("SQL_HOST")
      db_port = os.environ.get("SQL_PORT")
      db_user = os.environ.get("SQL_USER")
      db_password = os.environ.get("SQL_PASSWORD")
      db_database = os.environ.get("SQL_DATABASE")
      c.JupyterHub.db_url = f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_database}"

      class AppLogLoggingFilter(logging.Filter):
          def filter(self, record):
              if str(record.msg).startswith("Authenticated with token"):
                  return False
              if record.filename in ["scopes.py"]:
                  return False
              if str(record.msg).startswith("Failed to connect to"):
                  return False
              return True

      class AccessLogLoggingFilter(logging.Filter):
          def filter(self, record):
              if record.funcName in ["log_request"]:
                  return False
              return True

      class JupyterHubLoggingFilter(logging.Filter):
          def filter(self, record):
              if str(record.msg).startswith("Refreshing auth for"):            
                  return False
              return True

      class TornadoGeneralLoggingFilter(logging.Filter):
          def filter(self, record):
              if str(record.msg).startswith("Could not open static file"):
                  return False
              return True

      # available usual logger keys:
      # "JupyterHub", "tornado", "tornado.application", "tornado.access", "tornado.general", "oauthlib"
      logging_filter_classes = {
          "tornado.application": AppLogLoggingFilter,
          "tornado.access": AccessLogLoggingFilter,
          "JupyterHub": JupyterHubLoggingFilter,
          "tornado.general": TornadoGeneralLoggingFilter
      }
      all_loggers = {name: logging.getLogger(name) for name in logging.root.manager.loggerDict if name in logging_filter_classes.keys()}
      all_loggers_true = {name: logging.getLogger(name) for name in logging.root.manager.loggerDict}
      for key, value in logging_filter_classes.items():
          all_loggers[key].addFilter(value())


      logged_logger_name = os.environ.get("LOGGER_NAME", "JupyterHubDev")
      c.JupyterHub.log_format = f"%(color)s[%(levelname)1.1s %(asctime)s.%(msecs).03d {logged_logger_name} %(name)s %(module)s:%(lineno)d]%(end_color)s %(message)s"

      c.JupyterHub.tornado_settings = {'slow_spawn_timeout': 0, 'slow_stop_timeout': 20, 'static_path': '/mnt/shared-data/share/jupyterhub/static'}

      c.ConfigurableHTTPProxy.api_url = f'https://{get_name("proxy-api")}:{get_name_env("proxy-api", "_SERVICE_PORT")}'
      c.JupyterHub.hub_bind_url = f"https://:{hub_container_port}"
      c.JupyterHub.hub_connect_url = (
      f'https://{get_name("hub")}:{get_name_env("hub", "_SERVICE_PORT")}'
      )
      # TODO override cull service. cull --url http:// instead of https://

      c.JupyterHub.spawner_class = EventBackendSpawner
      c.EventBackendSpawner.http_timeout = 7200

      def poll_interval(spawner):
          custom_config = get_custom_config()
          system = spawner.user_options.get("system", "None")
          drf_service = custom_config.get("systems", {}).get(system, {}).get("drf-service", "None")
          if custom_config.get("drf-services", {}).get(drf_service, {}).get("poll", True):
              base_poll_interval = custom_config.get("drf-services", {}).get(drf_service, {}).get("poll_interval", 30)
              poll_interval_randomizer = custom_config.get("drf-services", {}).get(drf_service, {}).get("poll_interval_randomizer", 0)
              poll_interval = 1e3 * base_poll_interval + random.randint(
                  0, 1e3 * poll_interval_randomizer
              )
          else:
              poll_interval = 0
          return poll_interval

      c.EventBackendSpawner.poll_interval = poll_interval

      def request_kwargs(spawner):
          custom_config = get_custom_config()
          system = spawner.user_options.get("system", "None")
          drf_service = custom_config.get("systems", {}).get(system, {}).get("drf-service", "None")
          request_kwargs = custom_config.get("drf-services", {}).get(drf_service, {}).get("request_kwargs", {})
          if "request_timeout" not in request_kwargs.keys():
              request_kwargs["request_timeout"] = 30
          return request_kwargs

      async def request_url_start(spawner):
          custom_config = get_custom_config()
          system = spawner.user_options.get("system", "None")
          drf_service = custom_config.get("systems", {}).get(system, {}).get("drf-service", "None")
          url = custom_config.get("drf-services", {}).get(drf_service, {}).get("urls", {}).get("services", "None")
          if url == "None":
              reason = "JupyterHub configuration does not know drf-service {drf_service}, or it has no url configured"
              now = datetime.now().strftime("%Y_%m_%d %H:%M:%S.%f")[:-3]
              spawner.latest_events.append({
                  "failed": True,
                  "ready": False,
                  "progress": 100,
                  "message": "",
                  "html_message": f"<details><summary>{now}: System is not configured correctly. Please contact an administrator.</summary>{reason}</details>",
              })
              await asyncio.sleep(2*spawner.yield_wait_seconds)
              spawner.already_stopped = True
              raise Exception(reason)
          if not url.endswith("/"):
              url += "/"
          return url

      def request_url_poll_stop(spawner):
          custom_config = get_custom_config()
          system = spawner.user_options.get("system", "None")
          drf_service = custom_config.get("systems", {}).get(system, {}).get("drf-service", "None")
          url = custom_config.get("drf-services", {}).get(drf_service, {}).get("urls", {}).get("services", "None")
          if not url.endswith("/"):
              url += "/"
          return f"{url}{spawner.name}/"

      async def request_headers(spawner):
          custom_config = get_custom_config()
          system = spawner.user_options.get("system", "None")
          drf_service = custom_config.get("systems", {}).get(system, {}).get("drf-service", "None")    
          auth = os.environ.get(f"{drf_service.upper()}_AUTHENTICATION_TOKEN", None)
          if not auth:
              auth_username = os.environ.get(f"{drf_service.upper()}_JUPYTERHUB_USERNAME", "jupyterhub")
              auth_password = os.environ.get(f"{drf_service.upper()}_JUPYTERHUB_USER_PASS", "none")
              auth = "Basic " + base64.b64encode(f"{auth_username}:{auth_password}".encode()).decode()
          ret = {
              "Accept": "application/json",
              "Content-Type": "application/json",
              "Authorization": auth,
              "uuidcode": spawner.name
          }
          if custom_config.get("drf-services", {}).get(drf_service, {}).get("send_access_token", False):
              auth_state = await spawner.user.get_auth_state()
              ret["access-token"] = auth_state.get("access_token", "None")
          return ret

      async def pre_spawn_hook(spawner):
          spawner_events = get_spawner_events(spawner.user.id)
          spawner_events["start"].set()

          custom_config = get_custom_config()
          service, version = spawner.user_options.get("service", "").split("/")
          system = spawner.user_options.get("system", "")
          default_version = custom_config.get("systems", {}).get(system, {}).get("services", {}).get(service, {}).get("default_option", "")
          if not default_version:
              default_version = custom_config.get("services", {}).get(service, {}).get("default_option", "")
          try:
              version_number = float(version)
              default_number = float(default_version)
              if version_number < default_number:
                  now = datetime.now().strftime("%Y_%m_%d %H:%M:%S.%f")[:-3]
                  deprecated_warning_event = {
                      "failed": False,
                      "ready": False,
                      "progress": 15,
                      "html_message": f"<details><summary>{now}: <span style=\"color:darkorange;\">JupyterLab {version} is deprecated - you might want to switch to {default_version}</span></summary><p>JupyterLab versions < {default_version} are no longer actively supported even though they will be operational.</p></details>",
                  }
                  spawner.latest_events.append(deprecated_warning_event)
          except ValueError:
              pass

      async def post_stop_hook(spawner):
          try:
              # Stop ssh tunnel, if it was used
              custom_config = get_custom_config()
              drf_service = (
                  custom_config.get("systems", {})
                  .get(spawner.user_options["system"], {})
                  .get("drf-service", None)
              )
              if drf_service != "k8smgrhdfcloud":
                  base_url = (
                      custom_config.get("drf-services", {})
                      .get("tunnel", {})
                      .get("urls", {})
                      .get("tunnel", "None")
                  )
                  request_kwargs = (
                      custom_config.get("drf-services", {})
                      .get("tunnel", {})
                      .get("request_kwargs", {})
                  )
                  if "request_timeout" not in request_kwargs.keys():
                      request_kwargs["request_timeout"] = 30
                  url = f"{base_url}{spawner.name}/"
                  headers = {
                      "Accept": "application/json",
                      "Content-Type": "application/json",
                      "Authorization": os.environ.get("TUNNEL_AUTHENTICATION_TOKEN", None),
                      "uuidcode": spawner.name
                  }
                  req = HTTPRequest(
                      url=url,
                      method="DELETE",
                      headers=headers,
                      **request_kwargs,
                  )
                  await spawner.send_request(req, action="removetunnel", raise_exception=False)
              
              # Wait up to 5 times yield_wait_seconds, before sending stop event to frontend
              stopwait = time.monotonic() + 5*spawner.yield_wait_seconds
              while time.monotonic() < stopwait:
                  if spawner._cancel_event_yielded:
                      break
                  await asyncio.sleep(2*spawner.yield_wait_seconds)
          finally:
              if hasattr(spawner, "latest_events") and type(spawner.latest_events) == list:
                  if len(spawner.latest_events) == 0 or spawner.latest_events[-1].get("progress", 0) != 100:
                      now = datetime.now().strftime("%Y_%m_%d %H:%M:%S.%f")[:-3]
                      default_stop_event = {
                          "failed": True,
                          "ready": False,
                          "progress": 100,
                          "message": "",
                          "html_message": f"<details><summary>{now}: JupyterLab stopped</summary>JupyterLab was stopped for unknown reason.</details>",
                      }
                      spawner.latest_events.append(default_stop_event)

      c.EventBackendSpawner.pre_spawn_hook = pre_spawn_hook
      c.EventBackendSpawner.post_stop_hook = post_stop_hook

      def server_limit_exceeded(spawner, auth_state):
          custom_config = get_custom_config()
          named_spawners = list(spawner.user.all_spawners(include_default=False))

          user_groups = auth_state["groups"]
          service = spawner.user_options["service"]
          service_type = service.split("/")[0]
          service_option = service.split("/")[1]
          system = spawner.user_options["system"]

          service_limit = 0
          for group in user_groups:
              limit = custom_config.get("groups").get(group).get("services").get(
                  service_type, {}).get(service_option, {}).get("max_per_user", 0)
              if limit > service_limit:
                  service_limit = limit
          if service_limit:
              current = 0
              for spawner in named_spawners:
                  if (
                      spawner
                      and spawner.user_options
                      and spawner.user_options.get("service", "") == service
                      and spawner.active
                  ):
                      current += 1
              if current >= service_limit:
                  return "service", service, service_limit

          system_limit = 0
          for group in user_groups:
              limit = custom_config.get("groups").get(group).get("systems", {}).get("max_per_user", {}).get(system, 0)
              if limit > system_limit:
                  system_limit = limit
          if system_limit:
              current = 0
              for spawner in named_spawners:
                  if (
                      spawner
                      and spawner.user_options
                      and spawner.user_options.get("system", "") == system
                      and spawner.active
                  ):
                      current += 1
              if current >= system_limit:
                  return "system", system, system_limit
          return False

      def is_system_allowed(user_options, auth_state, custom_config):
          dropdown_list = auth_state.get("options_form", {}).get("dropdown_list", {})
          service = user_options.get("service", "")
          option = service.split("/", 1)[-1]
          system = user_options.get("system", "")
          account = user_options.get("account", "")
          project = user_options.get("project", "")
          partition = user_options.get("partition", "")
          # Let's check if the system is in maintenance
          incidents_dict = get_incidents()
          threshold_health = incidents_dict.get("interactive_threshold", 0)
          system_health = incidents_dict.get(system, {}).get("health", threshold_health-1)
          if system_health >= threshold_health:
              # System is in maintenance
              return False, f"System is currently in maintenance. Current health level: {system_health} (threshold: {threshold_health})"
          if not partition:
              # No partition: just check if system is allowed by group resources
              systems_list = [*dropdown_list.get(option, {})]
              return system in systems_list, f"system {system} currently not listed in {systems_list}."
          if partition in custom_config.get("systems", {}).get(system, {}).get("interactive_partitions", []):
              # Interactive partition, no need to check for resource values.
              # Check if partition is allowed in general
              return partition in dropdown_list.get(option, {}).get(system, {}).get(account, {}).get(project, {}).keys(), f"partition {partition} currently not allowed for {system}."
          else:
              resources = auth_state.get("options_form", {}).get("resources", {})
              reservation = user_options.get("reservation", "None")
              if reservation and reservation != "None":
                  reservation_list = dropdown_list.get(option, {}).get(system, {}).get(account, {}).get(project, {}).get(partition, ["None"])
                  reservation_names = [x["ReservationName"] for x in reservation_list if type(x) == dict and "ReservationName" in x.keys()]
                  if reservation not in reservation_names:
                      return False, f"Selected reservation ( {reservation} ) is not in allowed list ( {reservation_names} )"
              nodes = int(user_options.get("nodes", "-1"))
              if nodes != -1:
                  nodes = int(nodes / resources.get(option, {}).get(system, {}).get(partition, {}).get("nodes", {}).get("divisor", 1))
                  nodes_range = resources.get(option, {}).get(system, {}).get(partition, {}).get("nodes", {}).get("minmax", [-1, -1])
                  if ( 
                      nodes < nodes_range[0]
                      or nodes > nodes_range[1]
                      ):
                      return False, f"Selected nodes ( {nodes} ) not within allowed range {nodes_range}"
              runtime = int(user_options.get("runtime", "-1"))
              if runtime != -1:
                  runtime = int(runtime / resources.get(option, {}).get(system, {}).get(partition, {}).get("runtime", {}).get("divisor", 1))
                  runtime_range = resources.get(option, {}).get(system, {}).get(partition, {}).get("runtime", {}).get("minmax", [-1, -1])
                  if (
                      runtime < runtime_range[0]
                      or runtime > runtime_range[1]
                      ):
                      return False, f"Selected runtime ( {runtime} ) not within allowed range {runtime_range}"
              gpus = int(user_options.get("gpus", "-1"))
              if gpus != -1:
                  gpus = int(gpus / resources.get(option, {}).get(system, {}).get(partition, {}).get("gpus", {}).get("divisor", 1))
                  gpus_range = resources.get(option, {}).get(system, {}).get(partition, {}).get("gpus", {}).get("minmax", [-1, -1])
                  if ( 
                      gpus < gpus_range[0]
                      or gpus > gpus_range[1]
                      ):
                      return False, f"Selected gpus ( {gpus} ) not within allowed range {gpus_range}"
              xserver = int(user_options.get("xserver", "-1"))
              if xserver != -1:
                  xserver = int(xserver / resources.get(option, {}).get(system, {}).get(partition, {}).get("xserver", {}).get("divisor", 1))
                  xserver_range = resources.get(option, {}).get(system, {}).get(partition, {}).get("xserver", {}).get("minmax", [-1, -1])
                  if ( 
                      xserver < xserver_range[0]
                      or xserver > xserver_range[1]
                      ):
                      return False, f"Selected xserver gpu index ( {xserver} ) not within allowed range {xserver_range}"
          return True, ""
                  

      async def request_body_start(spawner):
          auth_state = await spawner.user.get_auth_state()
          custom_config = get_custom_config()
          # Check if system is allowed in current group configuration
          allowed, reason = is_system_allowed(spawner.user_options, auth_state, custom_config)
          if not allowed:
              now = datetime.now().strftime("%Y_%m_%d %H:%M:%S.%f")[:-3]
              spawner.latest_events.append({
                  "failed": True,
                  "ready": False,
                  "progress": 100,
                  "message": "",
                  "html_message": f"<details><summary>{now}: Start with this configuration not possible.</summary>{reason}</details>",
              })
              await asyncio.sleep(2*spawner.yield_wait_seconds)
              spawner.already_stopped = True
              raise Exception(reason)
          # Check server limit
          exceeded = server_limit_exceeded(spawner, auth_state)
          if exceeded:
              reason=(
                  "User {name} already has the maximum number of {limit} servers with configuration \"{type} - {value}\" running simultaneously. "
                  "One must be stopped before a new server can be created".format(name=spawner.user.name, limit=exceeded[2], type=exceeded[0], value=exceeded[1])
              )
              now = datetime.now().strftime("%Y_%m_%d %H:%M:%S.%f")[:-3]
              spawner.latest_events.append({
                  "failed": True,
                  "ready": False,
                  "progress": 100,
                  "message": "",
                  "html_message": f"<details><summary>{now}: Service limit exceeded.</summary>{reason}</details>",
              })
              await asyncio.sleep(2*spawner.yield_wait_seconds)
              spawner.already_stopped = True
              raise Exception(reason)

          body = {}
          env = spawner.get_env()
          env["JUPYTERHUB_USER_ID"] = spawner.user.orm_user.id
          env["JUPYTERHUB_STAGE"] = os.environ.get("JUPYTERHUB_STAGE", "")
          env["JUPYTERHUB_DOMAIN"] = os.environ.get("JUPYTERHUB_HOSTNAME", "")

          # HDF-Cloud does not use setup Tunnel, it uses updateLab instead
          drf_service = (
              custom_config.get("systems", {})
              .get(spawner.user_options["system"], {})
              .get("drf-service", None)
          )
          if drf_service == "k8smgrhdfcloud":
              url_parts = ["users", "updatelab", spawner.user.escaped_name]
              if spawner.name:
                  url_parts.append(spawner.name)
              env["JUPYTERHUB_UPDATELAB_URL"] = url_path_join(*url_parts)
          else:
              url_parts = ["users", "setuptunnel", spawner.user.escaped_name]
              if spawner.name:
                  url_parts.append(spawner.name)
              env["JUPYTERHUB_SETUPTUNNEL_URL"] = url_path_join(*url_parts)
              url_parts = ["users", "progress", "updateunicore", spawner.user.escaped_name]
              if spawner.name:
                  url_parts.append(spawner.name)
              env["JUPYTERHUB_STATUS_UNICORE_URL"] = f"https://{jhub_hostname}/hub/api/{url_path_join(*url_parts)}"

          body["user_options"] = spawner.user_options
          add_env = {}
          for options in custom_config.get("additional_spawn_options", {}).items():
              for key in options[1]:
                  add_env[f"JUPYTER_MODULE_{key.upper()}_ENABLED"] = int(
                      key in spawner.user_options.get("additional_spawn_options", {})
                  )
          env.update(add_env)
          body["env"] = env
          body["certs"] = {}
          for key, path in spawner.cert_paths.items():
            with open(path, "r") as f:
              body["certs"][key] = f.read()
          body["start_id"] = spawner.start_id
          spawner.log.debug(f"{spawner.name} start request body", extra={ "user_options": body["user_options"], "env": body["env"], "start_id": spawner.start_id, "uuidcode": spawner.name })
          return body

      async def cancel_click_event(spawner):
          now = datetime.now().strftime("%Y_%m_%d %H:%M:%S.%f")[:-3]
          return {
              "failed": False,
              "ready": False,
              "progress": 99,
              "message": "",
              "html_message": f"<details><summary>{now}: Cancelling start ...</summary>We're stopping the start process.</details>",
          }


      async def stop_event(spawner):
          now = datetime.now().strftime("%Y_%m_%d %H:%M:%S.%f")[:-3]
          return {
              "failed": True,
              "ready": False,
              "progress": 100,
              "message": "",
              "html_message": f"<details><summary>{now}: JupyterLab stopped.</summary></details>",
          }

      async def progress_ready_hook(spawner, ready_event):
          ready_msg = f"Service {spawner.name} started."
          now = datetime.now().strftime("%Y_%m_%d %H:%M:%S.%f")[:-3]
          url = ready_event["url"]
          ready_event[
              "html_message"
          ] = f'<details><summary>{now}: {ready_msg}</summary>You will be redirected to <a href="{url}">{url}</a></details>'
          spawner.latest_events.append(ready_event)
          return ready_event

      c.EventBackendSpawner.progress_ready_hook = progress_ready_hook
      c.EventBackendSpawner.cancelling_event = cancel_click_event
      c.EventBackendSpawner.stop_event = stop_event
      c.EventBackendSpawner.request_url_start = request_url_start
      c.EventBackendSpawner.request_headers_start = request_headers
      c.EventBackendSpawner.request_body_start = request_body_start
      c.EventBackendSpawner.request_kwargs = request_kwargs
      c.EventBackendSpawner.request_url_poll = request_url_poll_stop
      c.EventBackendSpawner.request_headers_poll = request_headers
      c.EventBackendSpawner.request_url_stop = request_url_poll_stop
      c.EventBackendSpawner.request_headers_stop = request_headers
      c.EventBackendSpawner.request_failed_poll_keep_running = True
      c.EventBackendSpawner.ssl_alt_names = [f"DNS:{jhub_hostname}", "DNS:default-hub"]

      # async def post_spawn_request_hook(spawner, resp_json):
      #     await asyncio.sleep(10)
      # c.EventBackendSpawner.post_spawn_request_hook = post_spawn_request_hook

      def service_address(spawner):
          namespace = os.environ.get('TUNNEL_DEPLOYMENT_NAMESPACE')
          custom_config = get_custom_config()
          drf_service = (
              custom_config.get("systems", {})
              .get(spawner.user_options["system"], {})
              .get("drf-service", None)
          )
          
          # max length for svc names: 63 (without suffix)
          # drf_service + "-" + spawner.name + "-" + spawner.start_id
          #      21     +  1  +    32     +  1  + 8 = 63
          drf_service_short = drf_service[:21]
          if drf_service == "k8smgrhdfcloud":
              userlabsnamespace = (
                  custom_config.get("drf-services", {})
                  .get(drf_service, {})
                  .get("namespace", "userlabs")
              )
              svc_name = f"svc-{spawner.name}-{spawner.start_id}"
              svc_full = f"{svc_name}.{userlabsnamespace}.svc"
          else:
              svc_name = f"{drf_service_short}-{spawner.name}-{spawner.start_id}"
              svc_full = f"{svc_name}.{namespace}.svc"
          spawner.log.info(f"Service Address: {svc_full}")
          return svc_full

      c.EventBackendSpawner.service_address = service_address

      def port(spawner):
          custom_config = get_custom_config()
          drf_service = (
              custom_config.get("systems", {})
              .get(spawner.user_options["system"], {})
              .get("drf-service", None)
          )
          userlabsport = (
              custom_config.get("drf-services", {})
              .get(drf_service, {})
              .get("port", 8080)
          )
          return userlabsport

      c.EventBackendSpawner.custom_port = port

      c.JupyterHub.authenticator_class = CustomGenericOAuthenticator
      c.Authenticator.admin_users = {
          'a.grosch_at_fz-juelich.de', 
          't.kreuzer_at_fz-juelich.de',
      }

      c.CustomGenericOAuthenticator.manage_groups = True
      c.CustomGenericOAuthenticator.enable_auth_state = True
      c.CustomGenericOAuthenticator.refresh_pre_spawn = True
      c.CustomGenericOAuthenticator.client_id = os.environ.get("OAUTH_CLIENT_ID")
      c.CustomGenericOAuthenticator.client_secret = os.environ.get("OAUTH_CLIENT_SECRET")
      c.CustomGenericOAuthenticator.authorize_url = (
          f"https://{unity_host}/jupyter-oauth2-as/oauth2-authz"
      )
      c.CustomGenericOAuthenticator.oauth_callback_url = (
          f"https://{jhub_hostname}/hub/oauth_callback"
      )
      c.CustomGenericOAuthenticator.token_url = (
          f"https://{unity_host}/jupyter-oauth2/token"
      )
      c.CustomGenericOAuthenticator.tokeninfo_url = (
          f"https://{unity_host}/jupyter-oauth2/tokeninfo"
      )
      c.CustomGenericOAuthenticator.userdata_url = (
          f"https://{unity_host}/jupyter-oauth2/userinfo"
      )
      def safe_user_name(resp_json):
          name = resp_json.get("username_attr")
          safe_name = name.replace("@", "_at_")
          return safe_name

      c.CustomGenericOAuthenticator.username_key = safe_user_name
      c.CustomGenericOAuthenticator.scope = "single-logout;hpc_infos;x500;authenticator;eduperson_entitlement;username;profile".split(
          ";"
      )
      c.CustomGenericOAuthenticator.tls_verify = False
      c.CustomGenericOAuthenticator.extra_params_allowed_runtime = {
          "uy_select_authn": ["jupyterhdfaaiAuthn.hbp", "jupyterldapAuthn.password"]
      }
      #https://jupyter-jsc.fz-juelich.de/hub/oauth_login?extra_param_uy_select_authn=jupyterhdfaaiAuthn.hbp
      #https://jupyter-jsc.fz-juelich.de/hub/oauth_login?extra_param_uy_select_authn=jupyterldapAuthn.password


      c.JupyterHub.template_paths = ["/mnt/shared-data/share/jupyterhub/templates"]
      c.JupyterHub.template_vars = {
          "spawn_progress_update_url": "users/progress/update",
          "user_cancel_message": user_cancel_message,
          "hostname": os.environ.get("JUPYTERHUB_HOSTNAME", "jupyter-jsc.fz-juelich.de"),
      }
      c.JupyterHub.data_files_path = "/mnt/shared-data/share/jupyterhub/static"

      c.JupyterHub.trusted_alt_names = [
          f"DNS:{app_name_dash_hub}",
          f"DNS:{app_name_dash}proxy-public",
          f"DNS:{app_name_dash}proxy-public.{namespace}.svc",
          f"DNS:{jhub_hostname}",
          "DNS:jrlogin01i",
          "DNS:jrlogin02i",
          "DNS:jrlogin03i",
          "DNS:jrlogin04i",
          "DNS:jrlogin05i",
          "DNS:jrlogin06i",
          "DNS:jrlogin07i",
          "DNS:jrlogin08i",
          "DNS:jrlogin09i",
          "DNS:jrlogin10i",
          "DNS:jrlogin11i",
          "DNS:jrlogin12i",
          "DNS:jrlogin13i",
          "DNS:jrlogin14i",
          "DNS:jwlogin00i",
          "DNS:jwlogin01i",
          "DNS:jwlogin02i",
          "DNS:jwlogin03i",
          "DNS:jwlogin04i",
          "DNS:jwlogin05i",
          "DNS:jwlogin06i",
          "DNS:jwlogin07i",
          "DNS:jwlogin08i",
          "DNS:jwlogin09i",
          "DNS:jwlogin10i",
          "DNS:jwlogin11i",
          "DNS:jwvis00i",
          "DNS:jwvis01i",
          "DNS:jwvis02i",
          "DNS:jwvis03i",
          "DNS:jwlogin21i",
          "DNS:jwlogin22i",
          "DNS:jwlogin23i",
          "DNS:jwlogin24i",
          "DNS:hdfmll01i",
          "DNS:hdfmll02i",
          "DNS:deepv",
          "DNS:jsfl01i",
          "DNS:jsfl02i",
          "DNS:jsfl03i",
          "DNS:jsfl04i",
      ]
