apiVersion: v1
kind: ConfigMap
metadata:
  name: check-reservations
data:
  run.sh: |
    #!/bin/sh

    SLEEP=$(/usr/local/bin/python3 -c 'import yaml; f=open("/mnt/custom_config/jupyterhub_custom_config.yaml", "r"); config = yaml.full_load(f); f.close(); print(config.get("reservation-check", {}).get("interval", 300))')
    
    OUTPUT_PATH="/mnt/shared-data/reservation-check/reservation.json"
    TMP_PATH="/tmp/reservation.json"
    /usr/local/bin/python3 -u /mnt/reservation/..data/reservation_check.py
    while true
    do
        echo "$(date) - Run Reservation check ..."
        /usr/local/bin/python3 -u /mnt/reservation/..data/reservation_check.py
        if cmp -s ${TMP_PATH} ${OUTPUT_PATH} || ! test -f ${OUTPUT_PATH} ; then
            echo "$(date) - Update reservation file"
            if [[ -f ${OUTPUT_PATH} ]]; then
                echo "$(date) - diff:"
                diff ${TMP_PATH} ${OUTPUT_PATH}
            else
                cat ${TMP_PATH}
            fi
            cp ${TMP_PATH} ${OUTPUT_PATH}
        fi
        echo "$(date) - Run Reservation check ... done"
        sleep ${SLEEP}
    done

  reservation_check.py: |
    # Update reservations every n seconds
    import copy
    import json
    import re
    import traceback
    import yaml
    from subprocess import check_output
    from subprocess import STDOUT

    reservation_key = "/mnt/ssh/reservation"
    reservation_timeout = 5
    output_path = "/tmp/reservation.json"
    config_path = "/mnt/custom_config/jupyterhub_custom_config.yaml"
    regex_pattern = "([\\S]+)=([\\S]+)"

    with open(config_path, "r") as f:
      config = yaml.full_load(f)

    try:
      with open(output_path, "r") as f:
        previous_dict = json.load(f)
    except:
      previous_dict = {}
    output_dict = {}

    for system, infos in config.get("reservation-check", {}).get("systems", {}).items():
      if system not in output_dict.keys():
        output_dict[system] = []
      li = [ "ssh", "-i", reservation_key, "-oLogLevel=ERROR", "-oStrictHostKeyChecking=no", "-oUserKnownHostsFile=/dev/null", "{}@{}".format(infos.get("user", "kreuzer1"), infos.get("host", "")), "-T"]

      def null_to_empty(key, value, infos):
        if key in infos.get("null_replace_keys", ["Accounts", "Users", "PartitionName"]) and value == infos.get("null_string", "(null)"):
          return ""
        return value

      try:
        print(" ".join(li))
        output = check_output(li, stderr=STDOUT, timeout=reservation_timeout).decode("utf8").rstrip()
        system_list_n = output.split("\n\n")
        system_list = [x.replace("\n", "") for x in system_list_n]
      except:
        print(f"Could not check reservation for {system}. Use previous values.")
        print(traceback.format_exc())
        if system in previous_dict.keys():
          output_dict[system] = previous_dict[system]
      else:
        for reservation_string in system_list:
          reservation_key_values_list = re.findall(regex_pattern, reservation_string)
          reservation_key_values_dict = { x[0]: null_to_empty(x[0], x[1], infos) for x in reservation_key_values_list }
          if "ReservationName" in reservation_key_values_dict.keys():
            output_dict[system].append(copy.deepcopy(reservation_key_values_dict))

    with open(output_path, "w") as f:
      json.dump(output_dict, f, sort_keys=True, indent=2)