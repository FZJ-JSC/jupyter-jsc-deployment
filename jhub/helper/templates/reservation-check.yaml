apiVersion: v1
kind: ConfigMap
metadata:
  name: jupyterhub-reservation-check
data:
  run.sh: |
    #!/bin/sh

    SLEEP=$(/usr/local/bin/python3 -c 'import json, os; f=open("/mnt/shared-data/git_config/jupyterhub_custom_config.json", "r"); config = json.load(f); f.close(); print(config.get("reservation-check", {}).get("interval", 300))')
    
    while true
    do
        /usr/local/bin/python3 -u /mnt/reservation/reservation_check.py
        sleep ${SLEEP}
    done

  reservation_check.py: |
    # Update reservations every n seconds
    import copy
    import json
    import re
    from subprocess import check_output
    from subprocess import STDOUT

    reservation_key = "/mnt/ssh/reservation"
    reservation_timeout = 5
    output_path = "/mnt/shared-data/reservation-check/reservation.json"
    config_path = "/mnt/shared-data/git_config/jupyterhub_custom_config.json"
    regex_pattern = "([\\S]+)=([\\S]+)"

    with open(config_path, "r") as f:
      config = json.load(f)

    output_dict = {}

    for system, infos in config.get("reservation-check", {}).get("systems", {}).items():
      if system not in output_dict.keys():
        output_dict[system] = []
      li = [ "ssh", "-i", reservation_key, "-oLogLevel=ERROR", "-oStrictHostKeyChecking=no", "-oUserKnownHostsFile=/dev/null", "{}@{}".format(infos.get("user", "ljupyter"), infos.get("host", "")), "-T"]

      def null_to_empty(key, value, infos):
        if key in infos.get("null_replace_keys", ["Accounts", "Users"]) and value == infos.get("null_string", "(null)"):
          return ""
        return value

      output = check_output(li, stderr=STDOUT, timeout=reservation_timeout).decode("utf8").rstrip()
      system_list_n = output.split("\n\n")
      system_list = [x.replace("\n", "") for x in system_list_n]
      for reservation_string in system_list:
        reservation_key_values_list = re.findall(regex_pattern, reservation_string)
        reservation_key_values_dict = { x[0]: null_to_empty(x[0], x[1], infos) for x in reservation_key_values_list }
        if "ReservationName" in reservation_key_values_dict.keys():
          output_dict[system].append(copy.deepcopy(reservation_key_values_dict))

    with open(output_path, "w") as f:
      json.dump(output_dict, f, sort_keys=True, indent=2)
