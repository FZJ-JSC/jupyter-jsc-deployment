cull:
  enabled: false
hub:
  config:
    JupyterHub:
      cleanup_proxy: false
      default_url: /hub/home
      # hub_ip: 0.0.0.0
      # hub_port: 8000
      init_spawners_timeout: 0
      jinja_environment_options:
        extensions:
          - jinja2.ext.do
          - jinja2.ext.loopcontrols
      last_activity_interval: 60
  extraConfig:
    customConfig: |-
      import os
      import sys

      custom_path = "/src/jupyterhub-custom"
      sys.path.insert(1, custom_path)

      namespace = os.environ.get("POD_NAMESPACE", "default")
      jupyterhub_host = get_name("hub")
      unity_host = "unity-jsc.fz-juelich.de"

      from apihandler import ForwardTunnelRestartAPIHandler
      from apihandler import JHubLogLevelAPIHandler
      from apihandler import SpawnNotificationAPIHandler
      from apihandler import SpawnProgressStatusAPIHandler
      from apihandler import SpawnProgressUpdateAPIHandler
      from apihandler import SpawnStopNotificationAPIHandler
      from apihandler import SpawnUpdateOptionsAPIHandler
      from apihandler import twoFA
      from apihandler import UserRandomServerAPIHandler
      from apihandler import user_cancel_message
      from apihandler import vo
      from customauthenticator import CustomGenericOAuthenticator
      from handler import page_handlers
      from spawner import BackendSpawner
      from logs import create_extra_handlers

      c.JupyterHub.log_level = 10
      custom_config_path = os.environ.get("CUSTOM_CONFIG_PATH", "/mnt/shared-data/git_config/jupyterhub_custom_config.json")
      c.JupyterHub.custom_config_file = custom_config_path
      c.JupyterHub.extra_log_handlers = create_extra_handlers()
      db_host = os.environ.get("SQL_HOST")
      db_port = os.environ.get("SQL_PORT")
      db_user = os.environ.get("SQL_USER")
      db_password = os.environ.get("SQL_PASSWORD")
      db_database = os.environ.get("SQL_DATABASE")
      c.JupyterHub.db_url = f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_database}"
      c.JupyterHub.pid_file = "/mnt/persistent/jupyterhub.pid"
      c.JupyterHub.cookie_secret_file = "/mnt/persistent/jupyterhub_cookie_secret"

      c.JupyterHub.allow_named_servers = True
      c.JupyterHub.internal_ssl = True
      c.JupyterHub.external_ssl_authorities = {
        "services-ca": {
          "key": "/mnt/persistent/internal-ssl/services-ca/services-ca.key",
          "cert": "/mnt/persistent/internal-ssl/services-ca/services-ca.crt",
          "ca": "/mnt/persistent/internal-ssl/services-ca_trust.crt"
        },
        "proxy-client-ca": {
          "key": "/mnt/persistent/internal-ssl/proxy-client-ca/proxy-client-ca.key",
          "cert": "/mnt/persistent/internal-ssl/proxy-client-ca/proxy-client-ca.crt",
          "ca": "/mnt/persistent/internal-ssl/proxy-client-ca_trust.crt"
        },
        "proxy-api-ca": {
          "key": "/mnt/persistent/internal-ssl/proxy-api-ca/proxy-api-ca.key",
          "cert": "/mnt/persistent/internal-ssl/proxy-api-ca/proxy-api-ca.crt",
          "ca": "/mnt/persistent/internal-ssl/proxy-api-ca_trust.crt"
        },
        "notebooks-ca": {
          "key": "/mnt/persistent/internal-ssl/notebooks-ca/notebooks-ca.key",
          "cert": "/mnt/persistent/internal-ssl/notebooks-ca/notebooks-ca.crt",
          "ca": "/mnt/persistent/internal-ssl/notebooks-ca_trust.crt"
        },
        "hub-ca": {
          "key": "/mnt/persistent/internal-ssl/hub-ca/hub-ca.key",
          "cert": "/mnt/persistent/internal-ssl/hub-ca/hub-ca.crt",
          "ca": "/mnt/persistent/internal-ssl/hub-ca_trust.crt"
        }
      }
      c.JupyterHub.internal_certs_location = "/mnt/shared-data/tmp-internal-ssl"
      #c.JupyterHub.trusted_alt_names = [
      #  "DNS:jupyterhub.local",
      #  f"DNS:{jupyterhub_host}"
      #]
      #  "DNS:hdfcloud-jupyterhub-forward",
      #  "DNS:demo-site-login-01",
      #]
      c.JupyterHub.ssl_cert = "/mnt/persistent/internal-ssl/hub-internal/hub-internal.crt"
      c.JupyterHub.ssl_key = "/mnt/persistent/internal-ssl/hub-internal/hub-internal.key"
      c.ConfigurableHTTPProxy.api_url = f'https://{get_name("proxy-api")}:{get_name_env("proxy-api", "_SERVICE_PORT")}'
      c.JupyterHub.hub_bind_url = f"https://:{hub_container_port}"
      c.JupyterHub.hub_connect_url = (
        f'https://{get_name("hub")}:{get_name_env("hub", "_SERVICE_PORT")}'
      )
      # TODO override cull service. cull --url http:// instead of https://
      c.JupyterHub.concurrent_spawn_limit = 7

      c.JupyterHub.spawner_class = BackendSpawner
      c.BackendSpawner.http_timeout = 900
      c.BackendSpawner.poll_interval = 10
      c.BackendSpawner.poll_interval_randomizer = 20
      # c.BackendSpawner.ssl_alt_names = [f"DNS:{jupyterhub_host}"]
      # See https://github.com/jupyterhub/jupyterhub/issues/1222#issuecomment-415264385
      c.JupyterHub.tornado_settings = {"slow_spawn_timeout": 0}

      c.JupyterHub.authenticator_class = CustomGenericOAuthenticator

      c.CustomGenericOAuthenticator.custom_config_file = custom_config_path
      c.CustomGenericOAuthenticator.enable_auth_state = True
      c.CustomGenericOAuthenticator.client_id = os.environ.get("OAUTH_CLIENT_ID")
      c.CustomGenericOAuthenticator.client_secret = os.environ.get("OAUTH_CLIENT_SECRET")
      c.CustomGenericOAuthenticator.authorize_url = (
          f"https://{unity_host}/jupyter-oauth2-as/oauth2-authz"
      )
      c.CustomGenericOAuthenticator.token_url = (
          f"https://{unity_host}/jupyter-oauth2/token"
      )
      c.CustomGenericOAuthenticator.tokeninfo_url = (
          f"https://{unity_host}/jupyter-oauth2/tokeninfo"
      )
      c.CustomGenericOAuthenticator.userdata_url = (
          f"https://{unity_host}/jupyter-oauth2/userinfo"
      )
      c.CustomGenericOAuthenticator.username_key = "username_attr"
      c.CustomGenericOAuthenticator.scope = "single-logout;hpc_infos;x500;authenticator;eduperson_entitlement;username;profile".split(
          ";"
      )
      c.CustomGenericOAuthenticator.tls_verify = False


      # def foo():
      #    ret = {"key1": ["value1", "value2"]}
      #    return ret


      # c.CustomGenericOAuthenticator.extra_params_allowed_runtime = foo
      # http://localhost:8000/hub/oauth_login?extra_param_key1=value1


      c.JupyterHub.template_paths = ["/src/jupyterhub-static/templates"]
      c.JupyterHub.template_vars = {
          "spawn_progress_update_url": "users/progress/update",
          "user_cancel_message": user_cancel_message,
          "hostname": "default",
      }
      c.JupyterHub.data_files_path = "/src/jupyterhub-static"

      c.JupyterHub.extra_handlers = [
          # PageHandlers
          (r"/links", page_handlers.LinksHandler),
          (r"/2FA", page_handlers.TwoFAHandler),
          (r"/imprint", page_handlers.ImprintHandler),
          (r"/privacy", page_handlers.DPSHandler),
          (r"/terms", page_handlers.ToSHandler),
          (r"/groups", page_handlers.VOHandler),
          (r"/logging", page_handlers.LoggingHandler),
          (r"/logging", page_handlers.LoggingHandler),
          # APIHandlers
          (r"/api/users/([^/]+)/random/server", UserRandomServerAPIHandler),
          (r"/api/users/([^/]+)/server/update", SpawnUpdateOptionsAPIHandler),
          (r"/api/users/([^/]+)/servers/([^/]*)/update", SpawnUpdateOptionsAPIHandler),
          (r"/api/users/progress/update/([^/]+)", SpawnProgressUpdateAPIHandler),
          (r"/api/users/progress/update/([^/]+)/([^/]+)", SpawnProgressUpdateAPIHandler),
          (r"/api/users/progress/status/([^/]+)", SpawnProgressStatusAPIHandler),
          (r"/api/users/progress/status/([^/]+)/([^/]+)", SpawnProgressStatusAPIHandler),
          (r"/api/users/([^/]+)/notifications/spawners/spawn", SpawnNotificationAPIHandler),
          (
              r"/api/users/([^/]+)/notifications/spawners/stop",
              SpawnStopNotificationAPIHandler,
          ),
          (r"/api/restarttunnel", ForwardTunnelRestartAPIHandler),
          (r"/api/2FA", twoFA.TwoFAAPIHandler),
          (r"/2FA/([^/]+)", twoFA.TwoFACodeHandler),
          (r"/api/vo/([^/]+)", vo.VOAPIHandler),
          (r"/api/votoken/([^/]+)", vo.VOTokenAPIHandler),
          (r"/api/logs/jhub/handler", JHubLogLevelAPIHandler),
          (r"/api/logs/jhub/handler/([^/]+)", JHubLogLevelAPIHandler),
          (r"/api/logs/([^/]+)/handler", JHubLogLevelAPIHandler),
          (r"/api/logs/([^/]+)/handler/([^/]+)", JHubLogLevelAPIHandler),
      ]

  image:
    pullPolicy: "Always"
    pullSecrets:
      - "gitlab-registry"
    name: registry.jsc.fz-juelich.de/jupyterjsc/k8s/images/jupyterhub-relaunch
    tag: "dev"
  initContainers:
    - name: prepare-shared-data
      image: alpine:3.14
      imagePullPolicy: Always
      env:
        - name: GIT_BRANCH
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['stage']
        - name: GIT_REPO
          valueFrom:
            secretKeyRef:
              name: "jupyter-jsc-config"
              key: REPOSITORY
        - name: GIT_USERNAME
          valueFrom:
            secretKeyRef:
              name: "jupyter-jsc-config"
              key: USERNAME
        - name: GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "jupyter-jsc-config"
              key: PASSWORD
      command: ["/bin/sh"]
      args:
        - -c
        - >-
          apk add bash git && mkdir -p /mnt/shared-data/tmp-internal-ssl && echo -n "IyEvYmluL2Jhc2gKClNSQz0iL21udC9pbnRlcm5hbF9zc2wvKiIKREVTVD0iL21udC9wZXJzaXN0ZW50L2ludGVybmFsLXNzbCIKCm1rZGlyIC1wICRERVNUCgpmb3IgZiBpbiAkU1JDCmRvCiAgZmlsZW5hbWU9JChiYXNlbmFtZSAkZikKICBpZiBbWyAke2ZpbGVuYW1lfSA9IGNlcnRpcHkuanNvbiBdXTsgdGhlbgogICAgY3AgJGYgJHtERVNUfS8ke2ZpbGVuYW1lfQogIGVsaWYgW1sgISAke2ZpbGVuYW1lfSA9ICpfdHJ1c3QuY3J0IF1dOyB0aGVuCiAgICBkaXJuYW1lPSR7ZmlsZW5hbWUlJV8qfQogICAgbWtkaXIgLXAgJHtERVNUfS8ke2Rpcm5hbWV9CiAgICBmaWxlbmFtZT0ke2ZpbGVuYW1lIyMqX30KICAgIGNwICRmICR7REVTVH0vJHtkaXJuYW1lfS8ke2ZpbGVuYW1lfQogIGVsc2UKICAgIGNwICRmICR7REVTVH0vJHtmaWxlbmFtZX0KICBmaQpkb25lCg==" | base64 -d > /tmp/secret_to_internal-ssl.sh && bash /tmp/secret_to_internal-ssl.sh && export GIT_REPO_SHORT=${GIT_REPO#"https://"} && cd /mnt/shared-data && git clone --single-branch --branch jupyterhub-${GIT_BRANCH} https://${GIT_USERNAME}:${GIT_PASSWORD}@${GIT_REPO_SHORT} git_config && chown -R 1000:100 /mnt/shared-data && chown -R 1000:100 /mnt/persistent
      volumeMounts:
        - name: shared-data
          mountPath: /mnt/shared-data
        - name: persistent
          mountPath: /mnt/persistent
        - name: internal-ssl
          mountPath: /mnt/internal_ssl
          readOnly: true
  extraEnv:
    - name: JUPYTERHUB_STAGE
      value: "staging"
    - name: LOGGING_CONFIG_FILE
      value: "/mnt/shared-data/git_config/logging.json"
    - name: MAINTENANCE_PATH
      value: "/mnt/shared-data/maintenance-check"
    - name: MAINTENANCE_FILE
      value: "/mnt/shared-data/maintenance-check/maintenance.json"
    - name: TUNNEL_DEPLOYMENT_NAMESPACE
      value: "jupyterjsc"
    - name: TUNNEL_JUPYTERHUB_USER_PASS
      valueFrom:
        secretKeyRef:
          name: drf-tunnel-passwds
          key: JUPYTERHUB_USER_PASS
    - name: UNICOREMGR_JUPYTERHUB_USER_PASS
      valueFrom:
        secretKeyRef:
          name: drf-unicoremgr-passwds
          key: JUPYTERHUB_USER_PASS
    - name: K8SMGRHDFCLOUD_JUPYTERHUB_USER_PASS
      valueFrom:
        secretKeyRef:
          name: drf-k8smgr-passwds
          key: JUPYTERHUB_USER_PASS
    - name: OAUTH_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: hub-custom
          key: oauth_client_id_password
    - name: OAUTH_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: hub-custom
          key: oauth_client_secret_password
    - name: SQL_HOST
      valueFrom:
        secretKeyRef:
          name: postgresql-general
          key: SQL_HOST
    - name: SQL_PORT
      valueFrom:
        secretKeyRef:
          name: postgresql-general
          key: SQL_PORT
    - name: SQL_DATABASE
      valueFrom:
        secretKeyRef:
          name: postgresql-users-jupyterjsc
          key: JUPYTERHUB_DATABASE
    - name: SQL_PASSWORD
      valueFrom:
        secretKeyRef:
          name: postgresql-users-jupyterjsc
          key: JUPYTERHUB_PASSWORD
    - name: SQL_USER
      valueFrom:
        secretKeyRef:
          name: postgresql-users-jupyterjsc
          key: JUPYTERHUB_USER
    - name: DEPLOYMENT_NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
  extraContainers:
    - name: maintenance-check
      image: python:3.9-alpine3.16
      imagePullPolicy: Always
      command: ["/bin/sh"]
      args:
        - -c
        - >-
            pip install jsonformatter python-dateutil requests &&
            mkdir -p $OUTPUT_DIR &&
            source /mnt/maintenance/run.sh
      env:
        - name: CUSTOM_CONFIG_PATH
          value: "/mnt/shared-data/git_config/jupyterhub_custom_config.json"
        - name: OUTPUT_DIR
          value: "/mnt/shared-data/maintenance-check"
        - name: LOGGER_NAME
          value: "MaintenanceCheck"
      volumeMounts:
        - name: shared-data
          mountPath: /mnt/shared-data
        - name: maintenance-check
          mountPath: /mnt/maintenance/maintenance_check.py
          subPath: maintenance_check.py
        - name: maintenance-check
          mountPath: /mnt/maintenance/run.sh
          subPath: run.sh
    - name: cleanup-sql
      image: python:3.9-alpine3.16
      imagePullPolicy: Always
      command: ["/bin/sh"]
      args:
        - -c
        - >-
            pip install requests psycopg2-binary &&
            source /mnt/sql/run.sh
      env:
        - name: CUSTOM_CONFIG_PATH
          value: "/mnt/shared-data/git_config/jupyterhub_custom_config.json"
        - name: SLEEP
          value: "30"
        - name: SQL_HOST
          valueFrom:
            secretKeyRef:
              name: postgresql-general
              key: SQL_HOST
        - name: JUPYTERHUB_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-users-jupyterjsc
              key: JUPYTERHUB_PASSWORD
        - name: UNICOREMGR_JUPYTERHUB_USER_PASS
          valueFrom:
            secretKeyRef:
              name: drf-unicoremgr-passwds
              key: JUPYTERHUB_USER_PASS
              optional: false
        - name: K8SMGRHDFCLOUD_JUPYTERHUB_USER_PASS
          valueFrom:
            secretKeyRef:
              name: drf-k8smgr-passwds 
              key: JUPYTERHUB_USER_PASS
              optional: false
      volumeMounts:
        - name: shared-data
          mountPath: /mnt/shared-data
        - name: cleanup-sql
          mountPath: /mnt/sql/cleanup_sql.py
          subPath: cleanup_sql.py
        - name: cleanup-sql
          mountPath: /mnt/sql/run.sh
          subPath: run.sh
        - name: internal-ssl
          mountPath: /mnt/certs/hub-ca_hub-ca.crt
          subPath: hub-ca_hub-ca.crt
        - name: drf-unicoremgr-certs
          mountPath: /mnt/unicoremgr_certs
        - name: drf-k8smgr-certs
          mountPath: /mnt/k8smgr_certs
    - name: mount-watch
      image: alpine:3.14
      imagePullPolicy: Always
      command: ["/bin/sh"]
      args:
        - -c
        - >-
            apk add bash git && /bin/bash /mnt/volumes_mw/mount_watch/..data/run.sh
      volumeMounts:
        - name: shared-data
          mountPath: /mnt/shared-data
        - name:  mount-watch
          mountPath: /mnt/volumes_mw/mount_watch
    - name: static-files
      image: nginx:1.22
      imagePullPolicy: Always
      ports:
        - containerPort: 8070
          protocol: TCP
      volumeMounts:
        - name: shared-data
          mountPath: /mnt/shared-data
        - name: hub-nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf

  extraVolumeMounts:
    - name: shared-data
      mountPath: /mnt/shared-data
    - name: persistent
      mountPath: /mnt/persistent
    - name: drf-tunnel-certs
      mountPath: /mnt/tunnel_certs
    - name: drf-unicoremgr-certs
      mountPath: /mnt/unicoremgr_certs
    - name: drf-k8smgr-certs
      mountPath: /mnt/k8smgr_certs
    - name: unity-jsc-certs
      mountPath: /mnt/unity_certs
proxy:
  service:
    type: ClusterIP
  chp:
    defaultTarget: "https://hub:8081"
    errorTarget: "https://hub:8081/hub/error"
    extraCommandLineFlags:
     - "--api-ssl-key=/etc/chp/tls/proxy-api_proxy-api.key"
     - "--api-ssl-cert=/etc/chp/tls/proxy-api_proxy-api.crt"
     - "--api-ssl-ca=/etc/chp/tls/proxy-api-ca_trust.crt"
     - "--api-ssl-request-cert"
     - "--api-ssl-reject-unauthorized"
     - "--client-ssl-key=/etc/chp/tls/proxy-client_proxy-client.key"
     - "--client-ssl-cert=/etc/chp/tls/proxy-client_proxy-client.crt"
     - "--client-ssl-ca=/etc/chp/tls/proxy-client-ca_trust.crt"
     - "--client-ssl-request-cert"
     - "--client-ssl-reject-unauthorized"
     # - "--log-level=debug"
    extraPodSpec:
      initContainers:
        - name: test
          image: alpine:3.14
          imagePullPolicy: Always
          command: ["/bin/sh"]
          args:
            - -c
            - >-
              mkdir -p /mnt/persistent/jhub
              # while true; do sleep 30; done
    nodeSelector:
      worker: "true"
  https:
    enabled: true
    type: secret
    secret:
      name: internal-ssl
      key: proxy-client_proxy-client.key
      crt: proxy-client_proxy-client.crt
      #key: hub-internal_hub-internal.key
      #crt: hub-internal_hub-internal.crt


